[{"id":1,"slug":"hello-world","header":"Hello, world!","subheader":"","body":"001-hello-world","preview":"In which our intrepid hero embarks upon a perilous quest.","tags":[],"publishedOn":"2019-02-01","author":"Aaron Ross"},{"id":2,"slug":"search-context","header":"Creating a search context","subheader":"Searching for user input in a dataset","body":"002-search-context","preview":"A common task in front-end development is taking\n  a string of user input and filtering a dataset for rows\n  that contain that input. Let's explore that.","tags":[{"id":1,"name":"javascript"}],"publishedOn":"2019-02-02","author":"Aaron Ross"},{"id":3,"slug":"reducers","header":"Reducers","subheader":"Transforming multiple inputs into a single output","body":"003-reducers","preview":"It may not be immediately obvious through the many\n  modern layers of abstraction, but code can often be boiled down\n  to piping some number of inputs to some other form of output.\n  Reducers play a key role in this process.","tags":[{"id":1,"name":"javascript"},{"id":4,"name":"fp"}],"publishedOn":"2019-02-03","author":"Aaron Ross"},{"id":4,"slug":"transducers","header":"Transducers","subheader":"Transforming a reducer","body":"004-transducers","preview":"You have a reducer that's almost perfect, but it's not\n  quite right. A transducer can take your existing reducer and fit\n  it to the task at hand.","tags":[{"id":1,"name":"javascript"},{"id":4,"name":"fp"}],"publishedOn":"2019-02-04","author":"Aaron Ross"},{"id":5,"slug":"ninja-reducers","header":"Ninja Reducers","subheader":"A reducer by any other name","body":"005-ninja-reducers","preview":"We defined reducers as a function that accepts two\n  inputs and produces a single output. What about reducers that\n  don't immediately look like reducers? You may already know a few!","tags":[{"id":1,"name":"javascript"},{"id":8,"name":"react"},{"id":4,"name":"fp"}],"publishedOn":"2019-02-05","author":"Aaron Ross"},{"id":6,"slug":"react-hooks","header":"Hooks, Hooks, Hooks!","subheader":"React 16.8.0 (Stable!)","body":"006-react-hooks","preview":"Component-based design transformed the frontend\n  landscape by fundamentally changing the way web apps are built.\n  React's new Hooks API is set to do that again, this time for function\n  logic.","tags":[{"id":1,"name":"javascript"},{"id":8,"name":"react"}],"publishedOn":"2019-02-06","author":"Aaron Ross"}]